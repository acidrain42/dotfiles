#! /usr/bin/env python3

import os
import socket
import subprocess
import sys

from datetime import datetime, timedelta


timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
debug = False


def debug_print(*args):
    if not debug:
        return

    def format_arg(s):
        if not isinstance(s, str):
            return s

        has_single_quote = "'" in s
        has_double_quote = '"' in s

        if has_single_quote and has_double_quote:
            return "'%s'" % (s.replace("'", "'\\''"))
        elif has_single_quote:
            return '"%s"' % s
        else:
            return "'%s'" % s

    args = [format_arg(a) for a in args]

    with open(os.path.expanduser('~/debug.log'), 'a') as f:
        f.write('%s [cmus-notify] %s\n' % (timestamp, ' '.join(args)))


class Metadata:
    def __init__(self):
        self.file = None
        self.artist = None
        self.album = None
        self.title = None
        self.tracknumber = None
        self.discnumber = None
        self.date = None
        self.duration = None
        self.position = None
        self.status = None
        self.cover = None

    def get_title(self):
        if self.artist and self.title:
            return '%s - %s' % (self.artist, self.title)
        else:
            return 'C* Music Player'

    def get_body(self):
        body = '%s%s\n%s' % (self.album, self._get_status(), self._get_track())
        position = self._get_duration()
        if position:
            body += ', ' + position

        return body

    def get_cover(self):
        if not self.file:
            return None

        album_dir = os.path.dirname(self.file)

        return next((os.path.join(album_dir, f)
            for f in os.listdir(album_dir)
            if f.startswith('cover.')), None)

    def _get_status(self):
        return {
            'playing': '',
            'paused': ' [Paused]',
            'stopped': ' [Stopped]'
        }[self.status]

    def _get_track(self):
        if self.discnumber:
            return 'disc %s, track %s' % (self.discnumber, self.tracknumber)
        else:
            return 'track %s' % self.tracknumber

    def _get_duration(self):
        if not self.duration:
            return None

        if self.position:
            return '%s / %s' % (self._format_time(self.position),
                                self._format_time(self.duration))
        else:
            return self._format_time(self.duration)

    @staticmethod
    def _format_time(sec):
        if type(sec) == str:
            sec = int(sec)

        sec_str = str(timedelta(seconds=sec))

        return sec_str[2:] if sec < 3600 else sec_str.zfill(8)


def extract_metadata(tags):
    m = Metadata()

    for t in tags:
        elems = t.split(' ')

        name, value = {
            'status': lambda x: ('status', x[0]),
            'file': lambda x: ('file', x[0]),
            'duration': lambda x: ('duration', x[0]),
            'position': lambda x: ('position', x[0]),
            'tag': lambda x: (x[0], ' '.join(x[1:]))
        }.setdefault(elems[0], lambda x: (None, None))(elems[1:])

        if name and value:
            setattr(m, name, value)

    return m


def notify(title, body='', icon=None):
    icon = icon or 'applications-multimedia'
    args = ['notify-send', '--hint=int:transient:1', '--icon', icon, title, body]

    debug_print(*args)
    subprocess.run(args)


def send(sock, msg):
    if isinstance(msg, str):
        msg = msg.encode('utf-8')

    bytes_sent = 0
    msg_len = len(msg)

    while bytes_sent < msg_len:
        sent = sock.send(msg[bytes_sent:])

        if sent == 0:
            raise RuntimeError("socket connection broken")

        bytes_sent += sent

def recv(sock):
    chunks = []
    buffer_size = 2048

    while True:
        chunk = sock.recv(buffer_size)

        if not chunk:
            raise RuntimeError("socket connection broken")

        chunk = chunk.decode('utf-8')
        chunks.append(chunk)

        if chunk.endswith('\n\n'):
            break

    return ''.join(chunks)


def main():
    if len(sys.argv) > 1 and sys.argv[1] == '-d':
        global debug
        debug = True
        del sys.argv[1]

    debug_print(*sys.argv[1:])

    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    try:
        sock.connect(os.path.expanduser("~/.config/cmus/socket"))
    except FileNotFoundError:
        notify("C* Music Player not running")
        return 1

    send(sock, "status\n")
    resp = recv(sock)
    sock.shutdown(socket.SHUT_RDWR)
    sock.close()

    m = extract_metadata(resp.split('\n'))
    notify(m.get_title(), m.get_body(), m.get_cover())

    return 0


if __name__ == '__main__':
    sys.exit(main())
