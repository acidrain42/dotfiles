#! /usr/bin/env python3

import os
import sys
import subprocess

from datetime import datetime, timedelta


timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
debug = False


def debug_print(*args):
    if not debug:
        return

    with open(os.path.expanduser('~/debug.log'), 'a') as f:
        f.write('%s [cmus-notify] %s\n' % (timestamp, ' '.join(args)))


def format_track(m):
    if m.discnumber:
        return 'disc %s, track %s' % (m.discnumber, m.tracknumber)
    else:
        return 'track %s' % m.tracknumber


def format_time(sec):
    if type(sec) == str:
        sec = int(sec)

    sec_str = str(timedelta(seconds=sec))

    return sec_str[2:] if sec < 3600 else sec_str.zfill(8)


def format_position(m):
    if not m.duration:
        return None

    if m.position:
        return '%s / %s' % (format_time(m.position), format_time(m.duration))
    else:
        return format_time(m.duration)


def get_cover(m):
    if not m.file:
        return None

    album_dir = os.path.dirname(m.file)

    return next((os.path.join(album_dir, f) for f in os.listdir(album_dir) if f.startswith('cover.')), None)

class Metadata:
    def __init__(self):
        self.file = None
        self.artist = None
        self.album = None
        self.title = None
        self.tracknumber = None
        self.discnumber = None
        self.date = None
        self.duration = None
        self.position = None
        self.status = None
        self.cover = None


def extract_metadata(argv):
    m = Metadata()
    for i in range(len(argv) // 2):
        k = argv[i * 2]
        v = argv[i * 2 + 1]
        setattr(m, k, v)

    return m


def main():
    if len(sys.argv) > 1 and sys.argv[1] == '-d':
        global debug
        debug = True
        del sys.argv[1]

    debug_print(*sys.argv[1:])

    m = extract_metadata(sys.argv[1:])

    if m.status == 'playing':
        title = '%s - %s' % (m.artist, m.title)
        body = '%s %s' % (m.album, format_track(m))
        position = format_position(m)
        if position:
            body += '\n' + position
    elif m.status == 'paused':
        title="C* Music Player"
        body="Paused"
    elif m.status == 'stopped':
        title="C* Music Player"
        body="Stopped"

    args = ['terminal-notifier', '-group', 'cmus', '-title', title, '-message', body]

    cover = get_cover(m)
    if cover:
        args += ['-appIcon', cover]

    debug_print(' '.join(args))
    subprocess.run(args)


if __name__ == '__main__':
    main()
